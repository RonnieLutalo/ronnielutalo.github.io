{"version":3,"file":"component---src-pages-blog-tsx-576b39d2ac1cf16709aa.js","mappings":"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","sources":["webpack://ronnielutalo.github.io/./src/components/shared/Badge.tsx","webpack://ronnielutalo.github.io/./src/components/shared/Card.tsx","webpack://ronnielutalo.github.io/./src/components/shared/CardContent.tsx","webpack://ronnielutalo.github.io/./src/components/shared/CardMedia.tsx","webpack://ronnielutalo.github.io/./src/components/shared/CardTitle.tsx","webpack://ronnielutalo.github.io/./src/components/shared/Cards.tsx","webpack://ronnielutalo.github.io/./src/components/elements/PostPreview.tsx","webpack://ronnielutalo.github.io/./src/components/elements/PostsList.tsx","webpack://ronnielutalo.github.io/./src/components/screens/BlogScreen.tsx","webpack://ronnielutalo.github.io/./src/pages/blog.tsx"],"sourcesContent":["import React from 'react';\r\n\r\ntype BadgeProps = {\r\n  children: React.ReactNode,\r\n  className?: string,\r\n};\r\n\r\nconst Badge = (props: BadgeProps): React.ReactElement | null => {\r\n  const { children, className = '' } = props;\r\n\r\n  if (!children) {\r\n    return null;\r\n  }\r\n\r\n  const commonClassName = 'bg-gray-200 px-1 rounded text-xs';\r\n  const classes = `${commonClassName} ${className}`;\r\n\r\n  return (\r\n    <div className={classes}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Badge;\r\n","import React from 'react';\r\n\r\ntype CardMode = 'row' | 'column';\r\n\r\nexport const cardModeRow: CardMode = 'row';\r\nexport const cardModeColumn: CardMode = 'column';\r\n\r\ntype CardProps = {\r\n  children: React.ReactNode,\r\n  mode?: CardMode,\r\n};\r\n\r\nconst Card = (props: CardProps): React.ReactElement | null => {\r\n  const { children, mode = cardModeColumn } = props;\r\n\r\n  if (!children) {\r\n    return null;\r\n  }\r\n\r\n  const commonCardStyles = 'transition duration-200 ease-in-out shadow-card rounded-md overflow-hidden bg-white flex flex-col';\r\n\r\n  const classes = mode === cardModeRow\r\n    ? `${commonCardStyles} sm:flex-row items-stretch`\r\n    : `${commonCardStyles}`;\r\n\r\n  return (\r\n    <div className={classes}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\ntype CardContentMode = 'row' | 'column';\r\n\r\nexport const cardContentModeRow: CardContentMode = 'row';\r\nexport const cardContentModeColumn: CardContentMode = 'column';\r\n\r\ntype CardContentProps = {\r\n  children: React.ReactNode,\r\n  className?: string,\r\n  mode?: CardContentMode,\r\n};\r\n\r\nconst CardContent = (props: CardContentProps): React.ReactElement | null => {\r\n  const { children, className = '', mode = cardContentModeColumn } = props;\r\n\r\n  if (!children) {\r\n    return null;\r\n  }\r\n\r\n  const commonClasses = `p-6 ${className}`;\r\n\r\n  const classes = mode === cardContentModeRow\r\n    ? `${commonClasses} sm:w-3/5 lg:w-3/4`\r\n    : `${commonClasses}`;\r\n\r\n  return (\r\n    <div className={classes} style={{ flex: 1 }}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardContent;\r\n","import React from 'react';\r\nimport { Link } from '../../types/Link';\r\nimport HyperLink from './HyperLink';\r\n\r\ntype CardMediaMode = 'row' | 'column';\r\n\r\nexport const cardMediaModeRow: CardMediaMode = 'row';\r\nexport const cardMediaModeColumn: CardMediaMode = 'column';\r\n\r\ntype CardMediaProps = {\r\n  children: React.ReactNode,\r\n  className?: string,\r\n  mode?: CardMediaMode,\r\n  link?: Link,\r\n};\r\n\r\nconst CardMedia = (props: CardMediaProps): React.ReactElement | null => {\r\n  const {\r\n    children,\r\n    className = '',\r\n    mode = cardMediaModeColumn,\r\n    link,\r\n  } = props;\r\n\r\n  const linkClasses = link && link.url\r\n    ? 'cursor-pointer'\r\n    : '';\r\n\r\n  const commonClasses = `transition duration-200 ease-in-out transform hover:-translate-y-1 hover:scale-105 h-48 bg-cover bg-gray-200 overflow-hidden block ${className} ${linkClasses}`;\r\n\r\n  const classes = mode === cardMediaModeRow\r\n    ? `${commonClasses} sm:h-auto sm:w-2/5 lg:w-1/4`\r\n    : `${commonClasses}`;\r\n\r\n  const wrappedChildren = link && link.url ? (\r\n    <HyperLink link={link} formatted={false}>\r\n      {children}\r\n    </HyperLink>\r\n  ) : children;\r\n\r\n  return (\r\n    <div className={classes}>\r\n      {wrappedChildren}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardMedia;\r\n","import React from 'react';\r\nimport H, { hLevel } from './H';\r\nimport { Link } from '../../types/Link';\r\nimport HyperLink from './HyperLink';\r\n\r\ntype CardTitleProps = {\r\n  children: React.ReactNode,\r\n  link?: Link,\r\n};\r\n\r\nconst CardTitle = (props: CardTitleProps): React.ReactElement | null => {\r\n  const { children, link } = props;\r\n\r\n  if (!children) {\r\n    return null;\r\n  }\r\n\r\n  const headerElement = (\r\n    <H level={hLevel.h3}>\r\n      {children}\r\n    </H>\r\n  );\r\n\r\n  const linkElement = link ? (\r\n    <HyperLink link={link}>\r\n      {headerElement}\r\n    </HyperLink>\r\n  ) : null;\r\n\r\n  return (\r\n    <div className=\"mb-3\">\r\n      {linkElement || headerElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardTitle;\r\n","import React from 'react';\r\n\r\ntype CardsMode = 'list' | 'grid';\r\n\r\nexport const cardModeList: CardsMode = 'list';\r\nexport const cardModeGrid: CardsMode = 'grid';\r\n\r\ntype CardsProps = {\r\n  children: React.ReactNode,\r\n  mode?: CardsMode,\r\n};\r\n\r\nconst Cards = (props: CardsProps): React.ReactElement | null => {\r\n  const { children, mode = cardModeGrid } = props;\r\n\r\n  if (!children) {\r\n    return null;\r\n  }\r\n\r\n  const commonClasses = 'grid gap-12 grid-cols-1';\r\n\r\n  const classes = mode === cardModeGrid\r\n    ? `${commonClasses} sm:grid-cols-2 lg:grid-cols-3`\r\n    : `${commonClasses}`;\r\n\r\n  return (\r\n    <div className={classes}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import React from 'react';\r\nimport { FiCalendar } from '@react-icons/all-files/fi/FiCalendar';\r\nimport { FiClock } from '@react-icons/all-files/fi/FiClock';\r\n\r\nimport { BlogPageQuery_allMdx_nodes } from '../../pages/__generated__/BlogPageQuery';\r\nimport Card, { cardModeRow } from '../shared/Card';\r\nimport CardContent, { cardContentModeRow } from '../shared/CardContent';\r\nimport type { Link as LinkType } from '../../types/Link';\r\nimport CardTitle from '../shared/CardTitle';\r\nimport FluidImage from '../shared/FluidImage';\r\nimport CardMedia, { cardMediaModeRow } from '../shared/CardMedia';\r\nimport Row from '../shared/Row';\r\nimport { timeToReadFromRemark } from '../../utils/time';\r\n\r\ntype PostPreviewProps = {\r\n  post: BlogPageQuery_allMdx_nodes,\r\n};\r\n\r\nconst PostPreview = (props: PostPreviewProps): React.ReactElement | null => {\r\n  const { post } = props;\r\n\r\n  const postLink: LinkType = {\r\n    url: post.fields?.slug,\r\n  };\r\n\r\n  const postCover = post.frontmatter?.cover?.childImageSharp?.fluid ? (\r\n    <FluidImage fluidImage={post.frontmatter?.cover?.childImageSharp?.fluid} />\r\n  ) : null;\r\n\r\n  const postSummary = post?.frontmatter?.summary ? (\r\n    <div className=\"font-light\">\r\n      {post?.frontmatter?.summary}\r\n    </div>\r\n  ) : null;\r\n\r\n  const dateElement = post?.frontmatter?.date ? (\r\n    <Row className=\"mr-6\">\r\n      <FiCalendar className=\"mr-1\" />\r\n      {post.frontmatter.date}\r\n    </Row>\r\n  ) : null;\r\n\r\n  const timeToRead = post?.timeToRead ? (\r\n    <Row>\r\n      <FiClock className=\"mr-1\" />\r\n      {timeToReadFromRemark(post?.timeToRead)} min to read\r\n    </Row>\r\n  ) : null;\r\n\r\n  return (\r\n    <Card mode={cardModeRow}>\r\n      <CardMedia mode={cardMediaModeRow} link={postLink}>\r\n        {postCover}\r\n      </CardMedia>\r\n      <CardContent mode={cardContentModeRow}>\r\n        <CardTitle link={postLink}>\r\n          {post?.frontmatter?.title}\r\n        </CardTitle>\r\n        <Row className=\"text-xs text-gray-500 mb-3\">\r\n          {dateElement}\r\n          {timeToRead}\r\n        </Row>\r\n        {postSummary}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default PostPreview;\r\n","import React from 'react';\r\n\r\nimport Cards, { cardModeList } from '../shared/Cards';\r\nimport PostPreview from './PostPreview';\r\nimport { BlogPageQuery, BlogPageQuery_allMdx_nodes } from '../../pages/__generated__/BlogPageQuery';\r\n\r\ntype PostsListProps = {\r\n  posts: BlogPageQuery,\r\n};\r\n\r\nconst PostsList = (props: PostsListProps): React.ReactElement => {\r\n  const { posts } = props;\r\n\r\n  const postsElements = posts.allMdx.nodes.map(\r\n    (node: BlogPageQuery_allMdx_nodes) => {\r\n      return <PostPreview post={node} key={node.id} />;\r\n    },\r\n  );\r\n\r\n  return (\r\n    <Cards mode={cardModeList}>\r\n      {postsElements}\r\n    </Cards>\r\n  );\r\n};\r\n\r\nexport default PostsList;\r\n","import React from 'react';\r\n\r\nimport PageLayout from '../layouts/PageLayout';\r\nimport PostsList from '../elements/PostsList';\r\nimport { BlogPageQuery } from '../../pages/__generated__/BlogPageQuery';\r\nimport PageHeader from '../shared/PageHeader';\r\nimport Row from '../shared/Row';\r\nimport Badge from '../shared/Badge';\r\nimport SEO from '../shared/SEO';\r\n\r\ntype BlogScreenProps = {\r\n  posts: BlogPageQuery;\r\n};\r\n\r\nconst BlogScreen = (props: BlogScreenProps): React.ReactElement => {\r\n  const { posts } = props;\r\n\r\n  const postsNum = posts.allMdx.totalCount;\r\n\r\n  return (\r\n    <PageLayout>\r\n      <SEO\r\n        title=\"Blog\"\r\n        description=\"Articles about Software Engineering, 2D/3D Computer Graphics and Filmmaking\"\r\n      />\r\n      <Row>\r\n        <PageHeader>Blog</PageHeader>\r\n        <Badge className=\"ml-3 self-start\">{postsNum}</Badge>\r\n      </Row>\r\n      <PostsList posts={posts} />\r\n    </PageLayout>\r\n  );\r\n};\r\n\r\nexport default BlogScreen;\r\n","import React from 'react';\r\nimport { graphql, PageProps } from 'gatsby';\r\n\r\nimport BlogScreen from '../components/screens/BlogScreen';\r\nimport { BlogPageQuery } from './__generated__/BlogPageQuery';\r\n\r\ninterface BlogProps extends PageProps {\r\n  data: BlogPageQuery,\r\n}\r\n\r\nexport const query = graphql`\r\n  query BlogPageQuery {\r\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\r\n      totalCount\r\n      nodes {\r\n        id\r\n        timeToRead\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          title\r\n          summary\r\n          date(formatString: \"MMM D, YYYY\")\r\n          cover {\r\n            childImageSharp {\r\n              fluid(\r\n                fit: COVER,\r\n                cropFocus: CENTER,\r\n                grayscale: false,\r\n                quality: 90,\r\n                maxWidth: 1000\r\n              ) {\r\n                ...GatsbyImageSharpFluid\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Blog = (props: BlogProps): React.ReactElement => {\r\n  const { data } = props;\r\n\r\n  return (\r\n    <BlogScreen posts={data} />\r\n  );\r\n};\r\n\r\nexport default Blog;\r\n"],"names":["props","children","className","classes","commonClassName","cardModeRow","mode","commonCardStyles","cardContentModeRow","commonClasses","style","flex","cardMediaModeRow","link","url","wrappedChildren","formatted","headerElement","level","hLevel","linkElement","cardModeList","cardModeGrid","post","postLink","fields","slug","postCover","frontmatter","cover","childImageSharp","fluid","FluidImage","fluidImage","postSummary","summary","dateElement","date","Row","FiCalendar","timeToRead","FiClock","timeToReadFromRemark","Card","CardMedia","CardContent","CardTitle","title","postsElements","posts","allMdx","nodes","map","node","key","id","Cards","postsNum","totalCount","PageLayout","SEO","description","PageHeader","Badge","data"],"sourceRoot":""}